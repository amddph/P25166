# Install required libraries with compatible versions
!pip install flair==0.14.0 transformers==4.41.2 torch==2.4.1 pandas openpyxl

# Import libraries
from flair.models import TextClassifier
from flair.data import Sentence
import pandas as pd
import numpy as np
import os
import shutil

# Clear Flair model cache to ensure fresh model download
flair_cache_dir = os.path.expanduser('~/.flair/models/en-sentiment')
if os.path.exists(flair_cache_dir):
    print(f"Clearing Flair model cache at {flair_cache_dir}")
    shutil.rmtree(flair_cache_dir)

# Load Flair's pre-trained sentiment classifier
print("Loading en-sentiment model...")
classifier = TextClassifier.load('en-sentiment')

# Load Excel file (replace 'your_file.xlsx' with your actual file name)
file_path = '/content/ForGT_SirJeffFile.xlsx'  # Update this path
df = pd.read_excel(file_path)

# Assume the text data is in a column named 'Text' (update if different)
text_column = 'Comment'  # Change to your column name if needed

# Check if the column exists
if text_column not in df.columns:
    raise ValueError(f"Column '{text_column}' not found in the Excel file. Available columns: {df.columns}")

# Handle missing or non-string values in the text column
df[text_column] = df[text_column].fillna('').astype(str)

# Initialize lists to store sentiment labels and scores
df['Sentiment'] = ''
df['Confidence_Score'] = 0.0

# Perform sentiment analysis in batches
batch_size = 100
for i in range(0, len(df), batch_size):
    batch_texts = df[text_column][i:i + batch_size].tolist()
    # Process each text in the batch
    for idx, text in enumerate(batch_texts):
        # Skip empty strings
        if not text.strip():
            df.iloc[i + idx, df.columns.get_loc('Sentiment')] = 'NEUTRAL'
            df.iloc[i + idx, df.columns.get_loc('Confidence_Score')] = 0.0
            continue
        # Create Flair Sentence object
        sentence = Sentence(text)
        # Predict sentiment
        classifier.predict(sentence)
        # Extract sentiment label and score
        label = sentence.labels[0].value  # e.g., 'POSITIVE' or 'NEGATIVE'
        score = sentence.labels[0].score  # Confidence score
        # Update DataFrame
        df.iloc[i + idx, df.columns.get_loc('Sentiment')] = label
        df.iloc[i + idx, df.columns.get_loc('Confidence_Score')] = score

# Display the first few rows of results
print("First few rows of results:")
print(df[[text_column, 'Sentiment', 'Confidence_Score']].head())

# Save results to a new Excel file
output_file = '/content/fortesting_flair.xlsx'
df.to_excel(output_file, index=False)
print(f"Results saved to {output_file}")

# Optional: Download the output file (uncomment if needed)
# from google.colab import files
# files.download(output_file)